# Generated by Django 4.0.6 on 2023-04-10 17:56

from django.db import migrations, models
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Colecao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('basisOfRecord', models.CharField(choices=[('PreservedSpecimen', 'PreservedSpecimen'), ('FossilSpecimen', 'FossilSpecimen'), ('LivingSpecimen', 'LivingSpecimen'), ('MaterialSample', 'MaterialSample'), ('Event', 'Event'), ('HumanObservation', 'HumanObservation'), ('MachineObservation', 'MachineObservation'), ('Taxon', 'Taxon'), ('Occurrence', 'Occurrence'), ('MaterialCitation', 'MaterialCitation')], default='PreservedSpecimen', max_length=18, verbose_name='Natureza do Registro')),
                ('modified', models.DateField(auto_now=True)),
                ('datasetName', models.CharField(default='Coleção de Acarologia, Centro de coleções taxonômicas (CCT), da Universidade Federal de Minas Gerais (UFMG)', max_length=107, verbose_name='Nome do conjunto de dados')),
                ('type', models.CharField(default='Coleção', max_length=15, verbose_name='Tipo')),
                ('language', models.CharField(default='pt', max_length=5, verbose_name='Idioma')),
                ('institutionID', models.CharField(blank=True, default='', max_length=50, verbose_name='ID da instituição')),
                ('institutionCode', models.CharField(default='UFMG-CCT', max_length=10, verbose_name='Código da instituição')),
                ('collectionCode', models.CharField(default='UFMG-AC', max_length=10, verbose_name='Código da coleção')),
                ('license', models.CharField(choices=[('CC', 'CC'), ('CC BY', 'CC BY'), ('CC BY NC', 'CC BY NC')], default='NC', max_length=8, verbose_name='Licença')),
                ('rightsHolder', models.CharField(default='Universidade Federal de Minas Gerais (UFMG)', max_length=43, verbose_name='Titular dos direitos')),
                ('dynamicProperties', models.CharField(blank=True, max_length=50, verbose_name='Propriedades dinâmicas')),
                ('occurrenceID', models.CharField(default='Br:UFMG-CCT:UFMG-AC:', max_length=50, verbose_name='ID da ocorrência')),
                ('catalogNumber', models.CharField(max_length=50, unique=True, verbose_name='Tombo')),
                ('otherCatalogNumbers', models.CharField(blank=True, max_length=20, verbose_name='Outros números de Tombo')),
                ('recordedBy', models.CharField(blank=True, max_length=70, verbose_name='Registrado por')),
                ('recordNumber', models.CharField(blank=True, max_length=50, verbose_name='Número do registro')),
                ('individualCount', models.CharField(blank=True, max_length=20, verbose_name='Número de indvíduos')),
                ('sex', models.CharField(blank=True, choices=[('Selecione', 'Selecione'), ('Fêmea', 'Fêmea'), ('Macho', 'Macho'), ('Hermafrodita', 'Hermafrodita'), ('Não se aplica', 'Não se aplica')], default='Selecione', max_length=13, verbose_name='Sexo')),
                ('lifeStage', models.CharField(blank=True, choices=[('Selecione', 'Selecione'), ('Ovo', 'Ovo'), ('Adulto', 'Adulto'), ('Protonifa', 'Protoninfa'), ('Deutoninfa', 'Deutoninfa'), ('Larva', 'Larva'), ('Tritoninfa', 'Tritoninfa')], max_length=15, verbose_name='Etapa de vida')),
                ('reproductiveCondition', models.CharField(blank=True, max_length=15, verbose_name='Condição reprodutiva')),
                ('preparations', models.CharField(blank=True, max_length=15, verbose_name='Preparações')),
                ('disposition', models.CharField(blank=True, default='na coleção', max_length=15, verbose_name='Disposição')),
                ('associatedTaxa', models.TextField(blank=True, default='', verbose_name='Táxons associados')),
                ('associatedReferences', models.TextField(blank=True, verbose_name='Referências associadas')),
                ('associatedMedia', models.URLField(blank=True, verbose_name='Mídia Associada')),
                ('associatedSequences', models.TextField(blank=True, verbose_name='Sequência Associada')),
                ('occurrenceRemarks', models.TextField(blank=True, default='', verbose_name='Comentários da ocorrência')),
                ('eventDate', models.DateField(blank=True, null=True, verbose_name='Data do evento')),
                ('eventTime', models.TimeField(blank=True, null=True, verbose_name='Hora do evento')),
                ('habitat', models.TextField(blank=True, default='', verbose_name='Habitat')),
                ('samplingProtocol', models.CharField(blank=True, max_length=50, verbose_name='Protocolo da amostra')),
                ('samplingEffort', models.CharField(blank=True, max_length=50, verbose_name='Esforço da amostragem')),
                ('eventRemarks', models.TextField(blank=True, default='', verbose_name='Comentários do evento')),
                ('continent', models.CharField(blank=True, choices=[('América do Sul', 'América do Sul'), ('África', 'África'), ('América Central', 'América Central'), ('América do Norte', 'América do Norte'), ('Antártica', 'Antártica'), ('Ártico', 'Ártico'), ('Ásia', 'Ásia'), ('Europa', 'Europa'), ('Oceania', 'Oceania')], max_length=22, verbose_name='Continente')),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('countryCode', models.CharField(blank=True, max_length=3, verbose_name='Código do país')),
                ('stateProvince', models.CharField(blank=True, max_length=50, verbose_name='Estado/Província')),
                ('county', models.CharField(blank=True, max_length=50, verbose_name='Município')),
                ('municipality', models.CharField(blank=True, max_length=50, verbose_name='Distrito')),
                ('island', models.CharField(blank=True, max_length=50, verbose_name='Ilha')),
                ('islandGroup', models.CharField(blank=True, max_length=50, verbose_name='Arquipélago')),
                ('waterBody', models.CharField(blank=True, max_length=50, verbose_name="Corpo d'água")),
                ('locality', models.CharField(blank=True, max_length=100, verbose_name='Localidade')),
                ('locationRemarks', models.TextField(blank=True, default='', verbose_name='Comentários da localização')),
                ('minimumElevationInMeters', models.IntegerField(blank=True, null=True, verbose_name='Elevação mínima em metros')),
                ('maximumElevationInMeters', models.IntegerField(blank=True, null=True, verbose_name='Elevação máxima em metros')),
                ('minimumDepthInMeters', models.IntegerField(blank=True, null=True, verbose_name='Profundidade mínima em metros')),
                ('maximumDepthInMeters', models.IntegerField(blank=True, null=True, verbose_name='Profundidade máxima em metros')),
                ('verbatimLatitude', models.CharField(blank=True, max_length=50, verbose_name='Latitude (XX S/N XX\' XX")')),
                ('verbatimLongitude', models.CharField(blank=True, max_length=50, verbose_name='Longitude (XX W/O XX\' XX")')),
                ('verbatimCoordinates', models.CharField(blank=True, max_length=50, verbose_name='Latitude e Longitude')),
                ('graus', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Graus Latitude')),
                ('minutos', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Minutos Latidude')),
                ('segundos', models.FloatField(blank=True, null=True, verbose_name='Segundos Latitude')),
                ('Sul_Norte', models.SmallIntegerField(blank=True, choices=[(-1, 'S'), (1, 'N')], db_column='S/N', null=True, verbose_name='Sul/Norte')),
                ('graus_1', models.PositiveSmallIntegerField(blank=True, db_column='graus.1', null=True, verbose_name='Graus Longitude')),
                ('minutos_1', models.PositiveSmallIntegerField(blank=True, db_column='minutos.1', null=True, verbose_name='Minutos Longitude')),
                ('segundos_1', models.FloatField(blank=True, db_column='segundos.1', null=True, verbose_name='Segundos Longitude')),
                ('w_O', models.SmallIntegerField(blank=True, choices=[(-1, 'L'), (1, 'O')], db_column='W/O', null=True, verbose_name='Leste/Oeste')),
                ('decimalLatitude', models.FloatField(blank=True, null=True, verbose_name='Latitude em decimal')),
                ('decimalLongitude', models.FloatField(blank=True, null=True, verbose_name='Longitude em decimal')),
                ('coordinateUncertaintyInMeters', models.CharField(blank=True, max_length=50, verbose_name='Incerteza na coordenada em metros')),
                ('geodeticDatum', models.CharField(blank=True, max_length=80, verbose_name='Dado geodésico')),
                ('georeferenceProtocol', models.TextField(blank=True, default='', verbose_name='Protocolo de georreferenciamento')),
                ('georeferenceBy', models.CharField(blank=True, max_length=200, verbose_name='Georreferenciado por')),
                ('georeferenceDate', models.DateField(blank=True, null=True, verbose_name='Data do georeferenciamento')),
                ('georeferenceRemarks', models.TextField(blank=True, verbose_name='Comentários do georreferenciamento')),
                ('kingdom', models.CharField(blank=True, default='Animalia', max_length=50, verbose_name='Reino')),
                ('phylum', models.CharField(blank=True, default='Arthropoda', max_length=50, verbose_name='Filo')),
                ('classe', models.CharField(blank=True, db_column='class', default='Acari', max_length=50, verbose_name='Classe')),
                ('order', models.CharField(blank=True, max_length=50, verbose_name='Ordem')),
                ('family', models.CharField(blank=True, max_length=50, verbose_name='Família')),
                ('subfamily', models.CharField(blank=True, max_length=50, verbose_name='Sub-família')),
                ('genus', models.CharField(blank=True, max_length=50, verbose_name='Gênero')),
                ('subgenus', models.CharField(blank=True, max_length=50, verbose_name='Sub-gênero')),
                ('specificEpithet', models.CharField(blank=True, max_length=50, verbose_name='Epíteto específico')),
                ('infraspecificEpithet', models.CharField(blank=True, max_length=50, verbose_name='Epíteto infraespecífico')),
                ('scientificName', models.CharField(blank=True, max_length=50, verbose_name='Nome científico')),
                ('scientificNameAuthorShip', models.CharField(blank=True, max_length=100, verbose_name='Autoria do nome científico')),
                ('taxonRank', models.CharField(blank=True, choices=[('Espécie', 'Espécie'), ('Subgênero', 'Subgênero'), ('Genero', 'Gênero'), ('Subfamília', 'Subfamília'), ('Familia', 'Família'), ('Ordem', 'Ordem'), ('Classe', 'Classe'), ('Filo', 'Filo'), ('Reino', 'Reino')], max_length=50, verbose_name='Nível científico')),
                ('vernacularName', models.CharField(blank=True, max_length=50, verbose_name='Nome comum')),
                ('taxonRemarks', models.TextField(blank=True, default='', verbose_name='Comentário sobre o táxon')),
                ('identificationQualifier', models.CharField(blank=True, max_length=50, verbose_name='Qualificador da identificação')),
                ('typeStatus', models.CharField(blank=True, max_length=50, verbose_name='Condição do tipo')),
                ('identifiedBy', models.CharField(blank=True, max_length=200, verbose_name='Identificado por')),
                ('dateIdentified', models.DateField(blank=True, null=True, verbose_name='Data da identificação')),
                ('identificationRemarks', models.TextField(blank=True, verbose_name='Comentários da identificação')),
            ],
        ),
    ]
